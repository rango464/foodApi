# БИРЖЕВОЙ ТЕРМИНАЛ - РУКОВОДСТВО ПОЛЬЗОВАТЕЛЯ

## ОБЗОР ПРОЕКТА

Биржевой терминал - это веб-приложение для торговли криптовалютами, разработанное с использованием только HTML, CSS и JavaScript. Терминал предоставляет полнофункциональный интерфейс для мониторинга рынка, анализа графиков и совершения сделок.

## СТРУКТУРА ПРОЕКТА

### Файлы проекта:
- `index.html` - основная HTML структура терминала
- `styles.css` - все CSS стили для интерфейса
- `scripts.js` - JavaScript логика и функциональность
- `help.txt` - данное руководство пользователя

## ОСНОВНЫЕ КОМПОНЕНТЫ

### 1. ВЕРХНЯЯ ИНТЕРАКТИВНАЯ ПАНЕЛЬ

#### Статус соединения:
- **Индикатор подключения**: Красный круг = отключено, зеленый = подключено
- **Текст статуса**: "Подключение...", "Подключено", "Отключено"
- **Счетчик FPS**: Показывает скорость обновления данных в реальном времени

#### Селектор валютных пар:
- **Множественный выбор**: Можно выбрать несколько валютных пар одновременно
- **Счетчик выбранных пар**: Показывается справа, если выбрано больше одной пары
- **Доступные пары**: BTCUSDT, ETHUSDT, LTCBTC

### 2. ЛЕВАЯ КОЛОНКА - ИСТОРИЯ СДЕЛОК

#### Калькулятор прибыли/убытка:
- **Автоматический расчет**: Общая прибыль/убыток обновляется автоматически
- **Цветовая индикация**: Зеленый = прибыль, красный = убыток
- **Валюта**: Отображение в долларах США ($)

#### Список сделок:
- **Хронологический порядок**: Новые сделки сверху
- **Прокрутка**: Область с прокруткой для просмотра всех сделок
- **Детальная информация**: Тип, пара, цена, объем, время, прибыль/убыток
- **Визуальное разделение**: Прибыльные сделки с зеленой границей, убыточные - с красной

### 3. ЦЕНТРАЛЬНАЯ КОЛОНКА - ГРАФИКИ

#### Система вкладок:
- **Динамические вкладки**: Создаются автоматически для выбранных валютных пар
- **Активная вкладка**: Подсвечивается синим цветом
- **Переключение**: Клик по вкладке переключает отображаемую пару

#### График свечей:
- **Интерактивность**: Перекрестие при наведении курсора
- **Тултип**: Детальная информация о свече (OHLCV)
- **Метки осей**: Цена на правой оси, время на нижней
- **Индикаторы сделок**: Желтые круги (прибыль), синие круги (убыток)
- **Двойной клик**: Открывает модальное окно для новой сделки

#### Панель масштабирования:
- **Таймфреймы**: 1м, 5м, 10м, 30м, 1ч, 1д, 1н
- **Активный таймфрейм**: Подсвечивается синим
- **Переключение**: Обновляет данные графика согласно выбранному интервалу

#### График объемов:
- **Синхронизация**: Временная шкала совпадает с графиком свечей
- **Цветовая индикация**: Зеленые столбцы (рост), красные (падение)
- **Пропорциональность**: Высота столбцов пропорциональна объему

### 4. ПРАВАЯ КОЛОНКА - БИРЖЕВОЙ СТАКАН

#### Структура стакана:
- **Аски (продажи)**: Красные строки сверху
- **Спред**: Желтая строка посередине с разностью цен
- **Биды (покупки)**: Зеленые строки снизу
- **Данные**: Цена и объем для каждого уровня

#### Регулировка размера:
- **Разделитель**: Левая граница колонки
- **Диапазон ширины**: От 200px до 600px
- **Перетаскивание**: Зажать и тянуть для изменения размера

## WEBSOCKET ПОДКЛЮЧЕНИЕ

### Конфигурация:
- **Адрес по умолчанию**: `ws://localhost:1323/ws`
- **Переменная конфигурации**: `wsaddr` в начале `scripts.js`
- **Автоподключение**: Происходит при загрузке страницы
- **Переподключение**: Автоматические попытки при разрыве соединения

### Формат данных:
```javascript
{
  "BTCUSDT": 119536.71,
  "ETHUSDT": 4406.02,
  "LTCBTC": 0.000991
}
```

### Обработка данных:
- **Парсинг JSON**: Автоматическое преобразование входящих данных
- **Обновление графиков**: Реальное время обновления свечей
- **Обновление стакана**: Генерация ордеров на основе текущих цен

## ФУНКЦИОНАЛЬНОСТЬ СДЕЛОК

### Открытие сделки:
1. **Двойной клик** по графику в нужной точке
2. **Автозаполнение цены** по позиции клика
3. **Выбор параметров**: тип, пара, цена, объем
4. **Подтверждение** через форму

### Отображение сделок:
- **На графике**: Круги с пунктирной границей
- **В списке**: Детальная информация с прибылью/убытком
- **Тултип**: При наведении на индикатор сделки

### Расчет прибыли:
- **Автоматический**: При закрытии сделки
- **Формула**: (Текущая цена - Цена покупки) × Объем
- **Обновление**: Общего баланса в калькуляторе

## ВОЗМОЖНОСТИ КАСТОМИЗАЦИИ

### 1. ИЗМЕНЕНИЕ ВАЛЮТНЫХ ПАР

В файле `scripts.js` найдите строку:
```javascript
this.availablePairs = ['BTCUSDT', 'ETHUSDT', 'LTCBTC'];
```

Добавьте или измените валютные пары по необходимости.

### 2. НАСТРОЙКА WEBSOCKET

В начале файла `scripts.js` измените:
```javascript
const wsaddr = "ws://localhost:1323/ws";
```

### 3. ИЗМЕНЕНИЕ ТАЙМФРЕЙМОВ

Найдите метод `getTimeframeMs()` и добавьте новые интервалы:
```javascript
const timeframes = {
    '1m': 60 * 1000,
    '5m': 5 * 60 * 1000,
    // Добавьте свои таймфреймы
};
```

### 4. КАСТОМИЗАЦИЯ СТИЛЕЙ

#### Цветовая схема:
В `styles.css` измените CSS переменные:
- `#0d1421` - основной фон
- `#38a169` - цвет прибыли (зеленый)
- `#e53e3e` - цвет убытка (красный)
- `#4299e1` - акцентный цвет (синий)

#### Размеры панелей:
```css
.left-column {
    width: 300px; /* Ширина левой панели */
}

.right-column {
    width: 350px; /* Ширина правой панели */
}
```

### 5. ДОБАВЛЕНИЕ НОВЫХ ИНДИКАТОРОВ

#### В JavaScript:
1. Создайте новый метод расчета индикатора
2. Добавьте отрисовку в метод `drawCandlestickChart()`
3. Обновите данные в цикле обновления

#### Пример добавления Moving Average:
```javascript
calculateMA(data, period) {
    // Логика расчета скользящей средней
}

drawMA(ctx, candleData, priceRange, chartArea) {
    // Логика отрисовки линии MA
}
```

### 6. РАСШИРЕНИЕ ФУНКЦИОНАЛЬНОСТИ СДЕЛОК

#### Типы ордеров:
1. Добавьте новые опции в `tradeType` select
2. Реализуйте логику в методе `executeTrade()`
3. Обновите отображение в списке сделок

#### Стоп-лоссы и тейк-профиты:
1. Добавьте поля в форму сделки
2. Реализуйте автоматическое закрытие сделок
3. Добавьте визуальные индикаторы на график

## ТЕХНИЧЕСКИЕ ДЕТАЛИ

### Производительность:
- **Canvas rendering**: Использует requestAnimationFrame для плавной анимации
- **Throttling**: Ограничение частоты обновления для оптимизации
- **Memory management**: Ограничение количества хранимых свечей

### Адаптивность:
- **Responsive design**: Адаптация под разные размеры экрана
- **Touch support**: Поддержка сенсорных устройств
- **Mobile optimization**: Оптимизация для мобильных браузеров

### Совместимость:
- **Modern browsers**: Chrome, Firefox, Safari, Edge
- **WebSocket support**: Требуется поддержка WebSocket API
- **Canvas 2D**: Необходима поддержка HTML5 Canvas

## УСТРАНЕНИЕ НЕПОЛАДОК

### Проблемы с подключением:
1. **Проверьте WebSocket сервер** на указанном адресе
2. **Убедитесь в правильности URL** в переменной wsaddr
3. **Проверьте консоль браузера** на наличие ошибок

### Проблемы с отображением:
1. **Очистите кэш браузера**
2. **Проверьте загрузку CSS и JS файлов**
3. **Убедитесь в поддержке Canvas** вашим браузером

### Проблемы с производительностью:
1. **Уменьшите количество отображаемых свечей**
2. **Увеличьте интервал обновления**
3. **Отключите неиспользуемые валютные пары**

## РАЗВИТИЕ ПРОЕКТА

### Планируемые улучшения:
- Добавление технических индикаторов (RSI, MACD, Bollinger Bands)
- Реализация алертов и уведомлений
- Сохранение настроек в localStorage
- Экспорт данных в различные форматы
- Интеграция с реальными биржевыми API

### Возможные расширения:
- Портфолио трекер
- Новостная лента
- Социальный трейдинг
- Копирование сделок
- Бэктестинг стратегий

## ЛИЦЕНЗИЯ И ИСПОЛЬЗОВАНИЕ

Проект создан в образовательных целях и может быть свободно модифицирован и распространен. При использовании в коммерческих целях рекомендуется добавить дополнительные меры безопасности и тестирования.

## ПОДДЕРЖКА

Для получения помощи или сообщения об ошибках, пожалуйста, изучите код в файлах проекта или обратитесь к документации по используемым технологиям:
- HTML5 Canvas API
- WebSocket API  
- CSS Grid и Flexbox
- JavaScript ES6+

---

Последнее обновление: Октябрь 2024
Версия: 1.0.0
